desc:MIDI Launchpad MK2
//tags: MIDI processing

slider1:1<0,3,1{Session, User1, User2, Mixer}> Default Layout
// Channels
slider2:1<1,16,1> Session LED Channel
slider3:6<1,16,1> User1 LED Channel
slider4:6<1,16,1> User2 LED Channel
slider5:6<1,16,1> Mixer LED Channel
// CC Colours
slider6:40<0,127,1> Layout Colour
slider7:40<0,127,1> Arrow Button Colour
// Note Group1 Setting
slider8:36<0,255,1> Note Group1 Start Note
slider9:67<0,255,1> Note Group1 End Note
slider10:0<1,16,1> Note Group1 LED Channel
slider11:0<0,11,1{C, C#, D, D#, E, F, F#, G, G#, A, A#, B}> Note Group1 Do Note
slider12:3<0,127,1> Note Group1 Pressed Note Colour
slider13:52<0,127,1> Note Group1 Do Note Colour
slider14:51<0,127,1> Note Group1 Major Scale Note Colour
slider15:9<0,16,1> Note Group1 Sound Channel1
slider16:10<0,16,1> Note Group1 Sound Channel2
slider17:0<0,16,1> Note Group1 Sound Channel3
// Note Group2 Setting
slider18:68<0,255,1> Note Group2 Start Note
slider19:99<0,255,1> Note Group2 End Note
slider20:0<1,16,1> Note Group2 LED Channel
slider21:0<0,11,1{C, C#, D, D#, E, F, F#, G, G#, A, A#, B}> Note Group2 Do Note
slider22:3<0,127,1> Note Group2 Pressed Note Colour
slider23:52<0,127,1> Note Group2 Do Note Colour
slider24:51<0,127,1> Note Group2 Major Scale Note Colour
slider25:9<0,16,1> Note Group2 Sound Channel1
slider26:10<0,16,1> Note Group2 Sound Channel2
slider27:0<0,16,1> Note Group2 Sound Channel3

// these lines tell Reaper the effect has no audio input/output,
// which enables processing optimizations.
// MIDI-only FX should always have these lines.
in_pin:none
out_pin:none

///////////////////////// @init ////////////////////////////
@init

//// PAD Driver ////
function pad_drv_get_sysex_header_message() local(message) (
  // header
  message[0] = 0xF0;
  message[1] = 0x00;
  message[2] = 0x20;
  message[3] = 0x29;
  message[4] = 0x02;
  message[5] = 0x18;
  message;
);

function pad_drv_send_sysex_set_led_standard(led, colour) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x0A;
  message[7] = led;
  message[8] = colour;
  // end
  message[9] = 0xF7;
  midisend_buf(0, message, 10);
);

function pad_drv_send_sysex_set_led_rgb(led, red, green, blue) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x0B;
  message[7] = led;
  message[8] = red;
  message[9] = green;
  message[10] = blue;
  // end
  message[11] = 0xF7;
  midisend_buf(0, message, 12);
);

function pad_drv_send_sysex_set_led_by_column(column_number, colour) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x0C;
  message[7] = column_number;
  message[8] = colour;
  // end
  message[9] = 0xF7;
  midisend_buf(0, message, 10);
);

function pad_drv_send_sysex_set_led_by_row(row_number, colour) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x0D;
  message[7] = row_number;
  message[8] = colour;
  // end
  message[9] = 0xF7;
  midisend_buf(0, message, 10);
);

function pad_drv_send_sysex_set_all_leds(colour) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x0E;
  message[7] = colour;
  // end
  message[8] = 0xF7;
  midisend_buf(0, message, 9);
);

function pad_drv_send_sysex_flash_led(led, colour) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x23;
  message[7] = 0;
  message[8] = led;
  message[9] = colour;
  // end
  message[10] = 0xF7;
  midisend_buf(0, message, 11);
);

function pad_drv_send_sysex_pulse_led(led, colour) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x28;
  message[7] = 0;
  message[8] = led;
  message[9] = colour;
  // end
  message[10] = 0xF7;
  midisend_buf(0, message, 11);
);

function pad_drv_send_sysex_scroll_text_across_pads(colour, loop, text, text_length) local(message, i) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x14;
  message[7] = colour;
  message[8] = loop;
  i=0;
  loop(text_length,
    message[8 + i] = text[i];
    i += 1;
  );
  // end
  message[8 + text_length] = 0xF7;
  midisend_buf(0, message, 9 + text_length);
);

PAD_DRV_LAYOUT_SESSION = 0x00;
PAD_DRV_LAYOUT_USER1 = 0x01;
PAD_DRV_LAYOUT_USER2 = 0x02;
PAD_DRV_LAYOUT_FADER = 0x04;
PAD_DRV_LAYOUT_PAN = 0x05;
function pad_drv_send_sysex_layout_selection(drv_layout) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x22;
  message[7] = drv_layout;
  // end
  message[8] = 0xF7;
  midisend_buf(0, message, 9);
);

function pad_drv_send_sysex_fader_setup(fader_number, fader_type, colour, initial_value) local(message) (
  message = pad_drv_get_sysex_header_message();
  message[6] = 0x2B;
  message[7] = fader_number;
  message[8] = fader_type;
  message[9] = colour;
  message[10] = initial_value;
  // end
  message[11] = 0xF7;
  midisend_buf(0, message, 12);
);

PAD_DRV_MIDI_NOTE_OFF = 0x80;
PAD_DRV_MIDI_NOTE_ON = 0x90;
PAD_DRV_MIDI_NOTE_CC = 0xB0;

function pad_drv_send_note_off(channel, note_number, note_velocity) (
  midisend(0, PAD_DRV_MIDI_NOTE_OFF + channel - 1, note_number, note_velocity);
);

function pad_drv_send_note_on(channel, note_number, note_velocity) (
  midisend(0, PAD_DRV_MIDI_NOTE_ON + channel - 1, note_number, note_velocity);
);

function pad_drv_send_cc(channel, control_number, control_value) (
  midisend(0, PAD_DRV_MIDI_NOTE_CC + channel - 1, control_number, control_value);
);

//// Pad CC ////
PAD_CC_UP = 104;
PAD_CC_DOWN = 105;
PAD_CC_LEFT = 106;
PAD_CC_RIGHT = 107;
PAD_CC_SESSION = 108;
PAD_CC_USER1 = 109;
PAD_CC_USER2 = 110;
PAD_CC_MIXER = 111;
PAD_CC_ARROW_START = PAD_CC_UP;
PAD_CC_ARROW_END = PAD_CC_UP;
PAD_CC_LAYOUT_START = PAD_CC_SESSION;
PAD_CC_LAYOUT_END = PAD_CC_MIXER;
PAD_CC_START = PAD_CC_ARROW_START;
PAD_CC_END = PAD_CC_LAYOUT_END;

PAD_CC_MEMOFFSET_COLOURS = 0x500;
PAD_CC_MEMOFFSET_CHANNELS = 0x600;

function pad_cc_get_colour(cc_number) (
  pad_cc_colours[cc_number + PAD_CC_MEMOFFSET_COLOURS];
);
function pad_cc_get_channel(cc_number) (
  pad_cc_channels[cc_number + PAD_CC_MEMOFFSET_CHANNELS];
);

function pad_cc_set_colour(cc_number, colour) (
  pad_cc_colours[cc_number + PAD_CC_MEMOFFSET_COLOURS] = colour;
);
function pad_cc_set_channel(cc_number, channel) (
  pad_cc_channels[cc_number + PAD_CC_MEMOFFSET_CHANNELS] = channel;
);

function pad_cc_init(
  cc_number,
  channel,
  colour
  ) (
  pad_cc_set_colour(cc_number, colour);
  pad_cc_set_channel(cc_number, channel);
);

function pad_cc_led_on(cc_number) local(colour, channel) (
  colour = pad_cc_get_colour(cc_number);
  channel = pad_cc_get_channel(cc_number);
  pad_drv_send_cc(channel, cc_number, colour);
);

function pad_cc_led_off(cc_number) local(channel) (
  channel = pad_cc_get_channel(cc_number);
  pad_drv_send_cc(channel, cc_number, 0);
);

//// Pad Note ////
PAD_NOTE_MEMOFFSET_COLOUR_ONS = 0x1000;
PAD_NOTE_MEMOFFSET_COLOUR_OFFS = 0x1100;
PAD_NOTE_MEMOFFSET_LED_CHANNELS = 0x1200;
PAD_NOTE_MEMOFFSET_SOUND_CHANNEL_COUNTS = 0x1300;
PAD_NOTE_MEMOFFSET_SOUND_CHANNELS = 0x1400;
PAD_NOTE_SOUND_CHANNEL_COUNT_MAX = 16;

function pad_note_get_colour_on(note_number) (
  pad_note_colour_ons[note_number + PAD_NOTE_MEMOFFSET_COLOUR_ONS];
);
function pad_note_get_colour_off(note_number) (
  pad_note_colour_offs[note_number + PAD_NOTE_MEMOFFSET_COLOUR_OFFS];
);
function pad_note_get_led_channel(note_number) (
  pad_note_led_channels[note_number + PAD_NOTE_MEMOFFSET_LED_CHANNELS];
);
function pad_note_get_sound_channel_count(note_number) (
  pad_note_sound_channel_counts[note_number + PAD_NOTE_MEMOFFSET_SOUND_CHANNEL_COUNTS];
);
function pad_note_get_sound_channel(note_number, inner_index) (
  pad_note_sound_channels[((note_number * PAD_NOTE_SOUND_CHANNEL_COUNT_MAX) + inner_index) + PAD_NOTE_MEMOFFSET_SOUND_CHANNELS];
);

function pad_note_set_colour_on(note_number, colour_on) (
  pad_note_colour_ons[note_number + PAD_NOTE_MEMOFFSET_COLOUR_ONS] = colour_on;
);
function pad_note_set_colour_off(note_number, colour_off) (
  pad_note_colour_offs[note_number + PAD_NOTE_MEMOFFSET_COLOUR_OFFS] = colour_off;
);
function pad_note_set_led_channel(note_number, led_channel) (
  pad_note_led_channels[note_number + PAD_NOTE_MEMOFFSET_LED_CHANNELS] = led_channel;
);
function pad_note_set_sound_channel_count(note_number, sound_channel_count) (
  pad_note_sound_channel_counts[note_number + PAD_NOTE_MEMOFFSET_SOUND_CHANNEL_COUNTS] = sound_channel_count;
);
function pad_note_set_sound_channel(note_number, inner_index, sound_channel) (
  pad_note_sound_channels[((note_number * PAD_NOTE_SOUND_CHANNEL_COUNT_MAX) + inner_index) + PAD_NOTE_MEMOFFSET_SOUND_CHANNELS] = sound_channel;
);
function pad_note_add_sound_channel(note_number, sound_channel) local(sound_channel_count, inner_index, sound_channel_current) (
  sound_channel_count = pad_note_get_sound_channel_count(note_number);
  inner_index = 0;
  is_exist = 0;
  loop(sound_channel_count,
    sound_channel_current = pad_note_get_sound_channel(note_number, inner_index);
    sound_channel_current == sound_channel ? (
      is_exist = 1;
    );
    inner_index += 1;
  );

  is_exist == 0 ? (
    pad_note_set_sound_channel(note_number, sound_channel_count, sound_channel);
    pad_note_set_sound_channel_count(note_number, sound_channel_count + 1);
  );
);
function pad_note_reset_sound_channel(note_number) (
  pad_note_set_sound_channel_count(note_number, 0);
);

function pad_note_init(
  note_number,
  colour_on,
  colour_off,
  led_channel
  ) (
  pad_note_set_colour_on(note_number, colour_on);
  pad_note_set_colour_off(note_number, colour_off);
  pad_note_set_led_channel(note_number, led_channel);
  pad_note_set_sound_channel_count(note_number, 0);
);

function pad_note_led_on(note_number) local(led_channel, colour_on) (
  led_channel = pad_note_get_led_channel(note_number);
  colour_on = pad_note_get_colour_on(note_number);
  pad_drv_send_note_on(led_channel, note_number, colour_on);
);

function pad_note_led_off(note_number) local(led_channel, colour_off) (
  led_channel = pad_note_get_led_channel(note_number);
  colour_off = pad_note_get_colour_off(note_number);
  pad_drv_send_note_on(led_channel, note_number, colour_off);
);

function pad_note_sound_on(note_number) local(sound_channel_count, sound_channel, inner_index) (
  sound_channel_count = pad_note_get_sound_channel_count(note_number);
  inner_index = 0;
  loop(sound_channel_count,
    sound_channel = pad_note_get_sound_channel(note_number, inner_index);
    pad_drv_send_note_on(sound_channel, note_number, 127);
    inner_index += 1;
  );
);

function pad_note_sound_off(note_number) local(sound_channel_count, sound_channel, inner_index) (
  sound_channel_count = pad_note_get_sound_channel_count(note_number);
  inner_index = 0;
  loop(sound_channel_count,
    sound_channel = pad_note_get_sound_channel(note_number, inner_index);
    pad_drv_send_note_off(sound_channel, note_number, 0);
    inner_index += 1;
  );
);


//// Scale ////
SCALE_MEMOFFSET_OCTAVE_RESULT = 0x2000;

function scale_calc_octaves(note_number, note_number_min, note_number_max) local(current, octave_count) (
  current = note_number;
  octave_count = 0;
  while(current <= note_number_max) (
    current >= note_number_min ? (
      scale_result_octaves[octave_count + SCALE_MEMOFFSET_OCTAVE_RESULT] = current;
      octave_count += 1;
    );
    current += 12;
  );
  octave_count;
);
function scale_get_octave(octave_index) (
  scale_result_octaves[octave_index + SCALE_MEMOFFSET_OCTAVE_RESULT];
);

//// Pad Note Group ////
PAD_NOTE_GROUP_MEMOFFSET_START_NOTE_NUMBERS = 0x3000;
PAD_NOTE_GROUP_MEMOFFSET_END_NOTE_NUMBERS = 0x3100;
PAD_NOTE_GROUP_MEMOFFSET_LED_CHANNELS = 0x3200;
PAD_NOTE_GROUP_MEMOFFSET_SOUND_CHANNELS = 0x3300;
PAD_NOTE_GROUP_MEMOFFSET_SOUND_CHANNEL_COUNTS = 0x3400;
PAD_NOTE_GROUP_SOUND_CHANNEL_COUNT_MAX = PAD_NOTE_SOUND_CHANNEL_COUNT_MAX;
PAD_NOTE_GROUP_MEMOFFSET_DO_NOTE_NUMBERS = 0x3A00;
PAD_NOTE_GROUP_MEMOFFSET_COLOUR_ONS = 0x3B00;
PAD_NOTE_GROUP_MEMOFFSET_COLOUR_OFF_DOS = 0x3C00;
PAD_NOTE_GROUP_MEMOFFSET_COLOUR_OFF_SCALES = 0x3D00;

function pad_note_group_get_start_note_number(note_group_number) (
  pad_note_group_start_note_numbers[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_START_NOTE_NUMBERS];
);
function pad_note_group_get_end_note_number(note_group_number) (
  pad_note_group_end_note_numbers[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_END_NOTE_NUMBERS];
);
function pad_note_group_get_led_channel(note_group_number) (
  pad_note_group_led_channels[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_LED_CHANNELS];
);
function pad_note_group_get_sound_channel_count(note_group_number) (
  pad_note_group_sound_channel_counts[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_SOUND_CHANNEL_COUNTS];
);
function pad_note_group_get_sound_channel(note_group_number, inner_index) (
  pad_note_group_sound_channels[((note_group_number * PAD_NOTE_GROUP_SOUND_CHANNEL_COUNT_MAX) + inner_index) + PAD_NOTE_GROUP_MEMOFFSET_SOUND_CHANNELS];
);
function pad_note_group_get_do_note_number(note_group_number) (
  pad_note_group_do_note_numbers[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_DO_NOTE_NUMBERS];
);
function pad_note_group_get_colour_on(note_group_number) (
  pad_note_group_colour_ons[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_COLOUR_ONS];
);
function pad_note_group_get_colour_off_do(note_group_number) (
  pad_note_group_colour_off_dos[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_COLOUR_OFF_DOS];
);
function pad_note_group_get_colour_off_scale(note_group_number) (
  pad_note_group_colour_off_scales[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_COLOUR_OFF_SCALES];
);

function pad_note_group_set_start_note_number(note_group_number, note_number) (
  pad_note_group_start_note_numbers[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_START_NOTE_NUMBERS] = note_number;
);
function pad_note_group_set_end_note_number(note_group_number, note_number) (
  pad_note_group_end_note_numbers[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_END_NOTE_NUMBERS] = note_number;
);
function pad_note_group_set_led_channel(note_group_number, led_channel) (
  pad_note_group_led_channels[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_LED_CHANNELS] = led_channel;
);
function pad_note_group_set_sound_channel_count(note_group_number, sound_channel_count) (
  pad_note_group_sound_channel_counts[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_SOUND_CHANNEL_COUNTS] = sound_channel_count;
);
function pad_note_group_set_sound_channel(note_group_number, inner_index, sound_channel) (
  pad_note_group_sound_channels[((note_group_number * PAD_NOTE_GROUP_SOUND_CHANNEL_COUNT_MAX) + inner_index) + PAD_NOTE_GROUP_MEMOFFSET_SOUND_CHANNELS] = sound_channel;
);
function pad_note_group_set_do_note_number(note_group_number, note_number) (
  pad_note_group_do_note_numbers[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_DO_NOTE_NUMBERS] = note_number;
);
function pad_note_group_set_colour_on(note_group_number, colour) (
  pad_note_group_colour_ons[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_COLOUR_ONS] = colour;
);
function pad_note_group_set_colour_off_do(note_group_number, colour) (
  pad_note_group_colour_off_dos[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_COLOUR_OFF_DOS] = colour;
);
function pad_note_group_set_colour_off_scale(note_group_number, colour) (
  pad_note_group_colour_off_scales[note_group_number + PAD_NOTE_GROUP_MEMOFFSET_COLOUR_OFF_SCALES] = colour;
);

function pad_note_group_apply_sound_channels(
  note_group_number
  ) local(
  start_note_number, end_note_number, note_number, i, sound_channel_count, sound_channel
  ) (
  start_note_number = pad_note_group_get_start_note_number(note_group_number);
  end_note_number = pad_note_group_get_end_note_number(note_group_number);
  sound_channel_count = pad_note_group_get_sound_channel_count(note_group_number);

  note_number = start_note_number;
  while(note_number <= end_note_number) (
    i = 0;
    pad_note_reset_sound_channel(note_number);
    loop(sound_channel_count,
      sound_channel = pad_note_group_get_sound_channel(note_group_number, i);
      pad_note_set_sound_channel(note_number, i, sound_channel);
      i += 1;
    );
    pad_note_set_sound_channel_count(note_number, sound_channel_count);

    note_number += 1;
  );
);

function pad_note_group_reset_colour_off_octaves(
  note_group_number, note_number, colour
  ) local(
  start_note_number, end_note_number, i, note_number, octave_count
  ) (
  start_note_number = pad_note_group_get_start_note_number(note_group_number);
  end_note_number = pad_note_group_get_end_note_number(note_group_number);

  octave_count = scale_calc_octaves(note_number, start_note_number, end_note_number);
  i = 0;
  loop(octave_count,
    note_number = scale_get_octave(i);
    pad_note_set_colour_off(note_number, colour);
    i += 1;
  );
);

function pad_note_group_reset_colour_off_majorscale(
  note_group_number
  ) local(do_note_number, do_note_colour, scale_note_colour) (
  do_note_colour = pad_note_group_get_colour_off_do(note_group_number);
  scale_note_colour = pad_note_group_get_colour_off_scale(note_group_number);
  do_note_number = pad_note_group_get_do_note_number(note_group_number);

  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number, do_note_colour);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 1, 0);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 2, scale_note_colour);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 3, 0);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 4, scale_note_colour);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 5, scale_note_colour);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 6, 0);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 7, scale_note_colour);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 8, 0);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 9, scale_note_colour);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 10, 0);
  pad_note_group_reset_colour_off_octaves(note_group_number, do_note_number + 11, scale_note_colour);
);

function pad_note_group_apply_colour(
  note_group_number
  ) local(
  start_note_number, end_note_number, note_number,
  ) (
  start_note_number = pad_note_group_get_start_note_number(note_group_number);
  end_note_number = pad_note_group_get_end_note_number(note_group_number);

  pad_note_group_reset_colour_off_majorscale(note_group_number);

  note_number = start_note_number;
  while(note_number <= end_note_number) (
    pad_note_led_off(note_number);
    note_number += 1;
  );
);

function pad_note_group_reset(
  note_group_number, generic_channel
  ) local(
  start_note_number, end_note_number, note_number
  ) (
  start_note_number = pad_note_group_get_start_note_number(note_group_number);
  end_note_number = pad_note_group_get_end_note_number(note_group_number);

  colour_on = pad_note_group_get_colour_on(note_group_number);
  led_channel = pad_note_group_get_led_channel(note_group_number);
  led_channel == 0 ? (
    pad_note_group_set_led_channel(note_group_number, generic_channel);
    led_channel = generic_channel;
  );

  note_number = start_note_number;
  while(note_number <= end_note_number) (
    pad_note_init(
      note_number, // note_number
      colour_on, // colour_on
      0, // colour_off
      led_channel // led_channel
    );

    note_number += 1;
  );

  pad_note_group_apply_sound_channels(note_group_number);
  pad_note_group_apply_colour(note_group_number);
);

function pad_note_group_init(
  note_group_number,
  start_note_number,
  end_note_number,
  led_channel,
  do_note_number,
  colour_on,
  colour_off_do,
  colour_off_scale
  ) (
  pad_note_group_set_start_note_number(note_group_number, start_note_number);
  pad_note_group_set_end_note_number(note_group_number, end_note_number);
  pad_note_group_set_led_channel(note_group_number, led_channel);
  pad_note_group_set_sound_channel_count(note_group_number, 0);
  pad_note_group_set_do_note_number(note_group_number, do_note_number);
  pad_note_group_set_colour_on(note_group_number, colour_on);
  pad_note_group_set_colour_off_do(note_group_number, colour_off_do);
  pad_note_group_set_colour_off_scale(note_group_number, colour_off_scale);

  pad_note_group_reset(note_number, 1);
);

function pad_note_group_add_sound_channel(note_group_number, sound_channel) local(sound_channel_count, inner_index, sound_channel_current) (
  sound_channel_count = pad_note_group_get_sound_channel_count(note_group_number);
  inner_index = 0;
  is_exist = 0;
  loop(sound_channel_count,
    sound_channel_current = pad_note_group_get_sound_channel(note_group_number, inner_index);
    sound_channel_current == sound_channel ? (
      is_exist = 1;
    );
    inner_index += 1;
  );

  is_exist == 0 ? (
    pad_note_group_set_sound_channel(note_group_number, sound_channel_count, sound_channel);
    pad_note_group_set_sound_channel_count(note_group_number, sound_channel_count + 1);
  );

  pad_note_group_apply_sound_channels(note_group_number);
);

function pad_note_group_remove_sound_channel(note_group_number, sound_channel) local(sound_channel_count, inner_index, loop_index) (
  sound_channel_count = pad_note_group_get_sound_channel_count(note_group_number);
  inner_index = 0;
  loop_index = 0;
  loop(sound_channel_count,
    sound_channel_current = pad_note_group_get_sound_channel(note_group_number, loop_index);
    sound_channel_current != sound_channel ? (
      inner_index += 1;
      pad_note_group_set_sound_channel(note_group_number, inner_index, sound_channel_current);
    );
    loop_index += 1;
  );
  pad_note_group_set_sound_channel_count(note_group_number, inner_index);

  pad_note_group_apply_sound_channels(note_group_number);
);

function pad_note_group_change_do(note_group_number, amount) local(do_note) (
  do_note = pad_note_group_get_do_note_number(note_group_number);
  do_note += amount;
  do_note >= 0 &&
  do_note <= 11 ? (
    pad_note_group_set_do_note_number(note_group_number, do_note);
    pad_note_group_apply_colour(note_group_number);
  );
);
function pad_note_group_increase_do(note_group_number) (
  pad_note_group_change_do(note_group_number, 1);
);
function pad_note_group_decrease_do(note_group_number) (
  pad_note_group_change_do(note_group_number, -1);
);

//// Pad Layout ////
PAD_LAYOUT_NUMBER_SESSION = 0;
PAD_LAYOUT_NUMBER_USER1 = 1;
PAD_LAYOUT_NUMBER_USER2 = 2;
PAD_LAYOUT_NUMBER_MIXER = 3;

PAD_LAYOUT_MEMOFFSET_DRV_LAYOUTS = 0x4000;
PAD_LAYOUT_MEMOFFSET_CC_NUMBERS = 0x4100;
PAD_LAYOUT_MEMOFFSET_NOTE_GROUP_COUNTS = 0x4200;
PAD_LAYOUT_MEMOFFSET_NOTE_GROUPS_LIST = 0x4300;
PAD_LAYOUT_NOTE_GROUP_COUNT_MAX = 10;

function pad_layout_get_drv_layout(layout_number) (
  pad_layout_drv_layouts[layout_number + PAD_LAYOUT_MEMOFFSET_DRV_LAYOUTS];
);
function pad_layout_get_cc_number(layout_number) (
  pad_layout_cc_numbers[layout_number + PAD_LAYOUT_MEMOFFSET_CC_NUMBERS];
);
function pad_layout_get_note_group_count(layout_number) (
  pad_layout_note_group_counts[layout_number + PAD_LAYOUT_MEMOFFSET_NOTE_GROUP_COUNTS];
);
function pad_layout_get_note_group(layout_number, inner_index) (
  pad_layout_note_groups_list[((layout_number * PAD_LAYOUT_NOTE_GROUP_COUNT_MAX) + inner_index) + PAD_LAYOUT_MEMOFFSET_NOTE_GROUPS_LIST];
);
function pad_layout_get_channel(layout_number) local(cc_number) (
  cc_number = pad_layout_get_cc_number(layout_number);
  pad_cc_get_channel(cc_number);
);

function pad_layout_set_drv_layout(layout_number, drv_layout) (
  pad_layout_drv_layouts[layout_number + PAD_LAYOUT_MEMOFFSET_DRV_LAYOUTS] = drv_layout;
);
function pad_layout_set_cc_number(layout_number, cc_number) (
  pad_layout_cc_numbers[layout_number + PAD_LAYOUT_MEMOFFSET_CC_NUMBERS] = cc_number;
);
function pad_layout_set_note_group_count(layout_number, note_group_count) (
  pad_layout_note_group_counts[layout_number + PAD_LAYOUT_MEMOFFSET_NOTE_GROUP_COUNTS] = note_group_count;
);
function pad_layout_set_note_group(layout_number, inner_index, note_group) (
  pad_layout_note_groups_list[((layout_number * PAD_LAYOUT_NOTE_GROUP_COUNT_MAX) + inner_index) + PAD_LAYOUT_MEMOFFSET_NOTE_GROUPS_LIST] = note_group;
);
function pad_layout_set_channel(layout_number, channel) local(cc_number) (
  cc_number = pad_layout_get_cc_number(layout_number);
  pad_cc_set_channel(cc_number, channel);
);

function pad_layout_init(
  layout_number,
  drv_layout,
  cc_number,
  channel,
  layout_button_colour
  ) (
  pad_cc_init(
    cc_number,
    channel,
    layout_button_colour
  );

  pad_layout_set_drv_layout(layout_number, drv_layout);
  pad_layout_set_cc_number(layout_number, cc_number);
  pad_layout_set_note_group_count(layout_number, 0);
);

function pad_layout_add_note_group(layout_number, note_group) local(note_group_count) (
  note_group_count = pad_layout_get_note_group_count(layout_number);
  pad_layout_set_note_group(layout_number, note_group_count, note_group);
  pad_layout_set_note_group_count(layout_number, note_group_count + 1);
);

g_pad_layout_number_current = 0;
function pad_layout_select(
  layout_number
  ) local(
  drv_layout,
  cc_number,
  note_group_count,
  note_group,
  i,
  layout_channel
  ) (
  g_pad_layout_number_current = layout_number;

  drv_layout = pad_layout_get_drv_layout(layout_number);
  pad_drv_send_sysex_layout_selection(drv_layout);

  pad_drv_send_sysex_set_all_leds(0);
  cc_number = pad_layout_get_cc_number(layout_number);
  pad_cc_led_on(cc_number);

  layout_channel = pad_layout_get_channel(layout_number);
  note_group_count = pad_layout_get_note_group_count(layout_number);
  i = 0;
  loop(note_group_count,
    note_group = pad_layout_get_note_group(layout_number, i);
    pad_note_group_reset(note_group, layout_channel);
    i += 1;
  );
);

function pad_layout_get_current() (
  g_pad_layout_number_current;
);

function pad_layout_change_do(layout_number, amount) local(note_group_count, i, note_group_number) (
  note_group_count = pad_layout_get_note_group_count(layout_number);
  i = 0;
  loop(note_group_count,
    note_group_number = pad_layout_get_note_group(layout_number, i);
    pad_note_group_change_do(note_group_number, amount);

    i += 1;
  );
);
function pad_layout_increase_do(layout_number) (
  pad_layout_change_do(layout_number, 1);
);
function pad_layout_decrease_do(layout_number) (
  pad_layout_change_do(layout_number, -1);
);

//// Mixer ////
PAD_MIXER_SOUND_CHANNEL_MIN = 9;

function pad_mixer_get_pad_number_for_sound_channel(
  view_note_group_number,
  sound_channel
  ) local(
  end_note_number,
  channel1_note_number,
  row,
  column,
  note_number
  )(
  end_note_number = pad_note_group_get_end_note_number(view_note_group_number);
  channel1_note_number = end_note_number - 3;

  row = ((sound_channel - PAD_MIXER_SOUND_CHANNEL_MIN) / 4);
  column = ((sound_channel - PAD_MIXER_SOUND_CHANNEL_MIN) % 4);
  
  note_number = channel1_note_number + column - (row * 4);
  note_number;
);

function pad_mixer_show_sound_channels(
  view_note_group_number,
  sound_note_group_number
  ) local(
  sound_channel_count,
  i,
  sound_channel,
  note_number
  )(
  sound_channel_count = pad_note_group_get_sound_channel_count(sound_note_group_number);
  i = 0;
  asdf = sound_channel_count;
  loop(sound_channel_count,
    sound_channel = pad_note_group_get_sound_channel(
      sound_note_group_number,
      i
    );
    note_number = pad_mixer_get_pad_number_for_sound_channel(
      view_note_group_number,
      sound_channel
    );
    pad_note_led_on(note_number);
  );
);

function pad_mixer_init(
  channel,
  layout_button_colour
  ) (
  // Note Groups
  pad_note_group_init(
    10, // note_group_number
    36, // start_note_number
    59, // end_note_number
    slider_mixer_led_channel, // led_channel
    0, // do_note_number
    3, // note_on_colour
    0, // do_note_off_colour
    0 // scale_note_off_colour
  );
  pad_note_group_init(
    11, // note_group_number
    60, // start_note_number
    67, // end_note_number
    slider_mixer_led_channel, // led_channel
    0, // do_note_number
    3, // note_on_colour
    0, // do_note_off_colour
    0 // scale_note_off_colour
  );
  pad_note_group_init(
    12, // note_group_number
    68, // start_note_number
    91, // end_note_number
    slider_mixer_led_channel, // led_channel
    0, // do_note_number
    3, // note_on_colour
    0, // do_note_off_colour
    0 // scale_note_off_colour
  );
  pad_note_group_init(
    13, // note_group_number
    92, // start_note_number
    99, // end_note_number
    slider_mixer_led_channel, // led_channel
    0, // do_note_number
    3, // note_on_colour
    0, // do_note_off_colour
    0 // scale_note_off_colour
  );

  pad_layout_init(
    PAD_LAYOUT_NUMBER_MIXER,
    PAD_DRV_LAYOUT_USER1,
    PAD_CC_MIXER,
    channel,
    layout_button_colour
  );  
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_MIXER, 10);
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_MIXER, 11);
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_MIXER, 12);
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_MIXER, 13);

  pad_mixer_show_sound_channels(11, 1);
  pad_mixer_show_sound_channels(13, 2);
);

//// Is First ////
g_is_first = 1;

//////////////////////// @slider //////////////////////////////
@slider
slider_default_layout = slider1;
// Channels
slider_session_led_channel = slider2;
slider_user1_led_channel = slider3;
slider_user2_led_channel = slider4;
slider_mixer_led_channel = slider5;
// CC Colours
slider_layout_colour = slider6;
slider_arrow_button_colour = slider7;
// Note Group1 Setting
slider_note_group1_start_note = slider8;
slider_note_group1_end_note = slider9;
slider_note_group1_led_channel = slider10;
slider_note_group1_do_note = slider11;
slider_note_group1_pressed_note_colour = slider12;
slider_note_group1_do_note_colour = slider13;
slider_group1_major_scale_note_colour = slider14;
slider_note_group1_sound_channel1 = slider15;
slider_note_group1_sound_channel2 = slider16;
slider_note_group1_sound_channel3 = slider17;
// Note Group2 Setting
slider_note_group2_start_note = slider18;
slider_note_group2_end_note = slider19;
slider_note_group2_led_channel = slider20;
slider_note_group2_do_note = slider21;
slider_note_group2_pressed_note_colour = slider22;
slider_note_group2_do_note_colour = slider23;
slider_group2_major_scale_note_colour = slider24;
slider_note_group2_sound_channel1 = slider25;
slider_note_group2_sound_channel2 = slider26;
slider_note_group2_sound_channel3 = slider27;

//////////////////////// @block //////////////////////////////
@block
g_is_first == 1 ? (
  // Note Group1
  pad_note_group_init(
    1, // note_group_number
    slider_note_group1_start_note, // start_note_number
    slider_note_group1_end_note, // end_note_number
    slider_note_group1_led_channel, // led_channel
    slider_note_group1_do_note, // do_note_number
    slider_note_group1_pressed_note_colour, // note_on_colour
    slider_note_group1_do_note_colour, // do_note_off_colour
    slider_group1_major_scale_note_colour // scale_note_off_colour
  );
  slider_note_group1_sound_channel1 > 0 ? (
    pad_note_group_add_sound_channel(0, slider_note_group1_sound_channel1);
  );
  slider_note_group1_sound_channel2 > 0 ? (
    pad_note_group_add_sound_channel(0, slider_note_group1_sound_channel2);
  );
  slider_note_group1_sound_channel2 > 0 ? (
    pad_note_group_add_sound_channel(0, slider_note_group1_sound_channel2);
  );

  // Note Group2
  pad_note_group_init(
    2, // note_group_number
    slider_note_group2_start_note, // start_note_number
    slider_note_group2_end_note, // end_note_number
    slider_note_group2_led_channel, // led_channel
    slider_note_group2_do_note, // do_note_number
    slider_note_group2_pressed_note_colour, // note_on_colour
    slider_note_group2_do_note_colour, // do_note_off_colour
    slider_group2_major_scale_note_colour // scale_note_off_colour
  );
  slider_note_group2_sound_channel1 > 0 ? (
    pad_note_group_add_sound_channel(0, slider_note_group2_sound_channel1);
  );
  slider_note_group2_sound_channel2 > 0 ? (
    pad_note_group_add_sound_channel(0, slider_note_group2_sound_channel2);
  );
  slider_note_group2_sound_channel2 > 0 ? (
    pad_note_group_add_sound_channel(0, slider_note_group2_sound_channel2);
  );

  // Layout Session
  pad_layout_init(
    PAD_LAYOUT_NUMBER_SESSION, // layout_number
    PAD_DRV_LAYOUT_USER1, // drv_layout
    PAD_CC_SESSION, // cc_number
    slider_session_led_channel, // channel
    slider_layout_colour // layout_button_colour
  );
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_SESSION, 1);
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_SESSION, 2);

  // Layout User1
  pad_layout_init(
    PAD_LAYOUT_NUMBER_USER1, // layout_number
    PAD_DRV_LAYOUT_USER1, // drv_layout
    PAD_CC_USER1, // cc_number
    slider_user1_led_channel, // channel
    slider_layout_colour // layout_button_colour
  );
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_USER1, 1);
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_USER1, 2);

  // Layout User2
  pad_layout_init(
    PAD_LAYOUT_NUMBER_USER2, // layout_number
    PAD_DRV_LAYOUT_USER1, // drv_layout
    PAD_CC_USER2, // cc_number
    slider_user2_led_channel, // channel
    slider_layout_colour // layout_button_colour
  );
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_USER2, 1);
  pad_layout_add_note_group(PAD_LAYOUT_NUMBER_USER2, 2);

  // Mixer Setting
  pad_mixer_init(
    slider_mixer_led_channel, // channel
    slider_layout_colour // layout_button_colour
  );

  // Select Layout
  pad_layout_select(slider_default_layout);

  // End First Loop
  g_is_first = 0;
);

while (midirecv(offset, midi_status, midi_num, midi_value)) (
  midi_type = midi_status & 0xf0;
  midi_channel = (midi_status & 0x0f) + 1;

  // Note On
  midi_type == PAD_DRV_MIDI_NOTE_ON ? (
    midi_value > 0 ?(
      // Note On
      pad_note_led_on(midi_num);
      pad_note_sound_on(midi_num);
    ) : (
      // Note Off
      pad_note_led_off(midi_num);
      pad_note_sound_off(midi_num);
    );
  );

  // Note Off
  midi_type == PAD_DRV_MIDI_NOTE_OFF ? (
    pad_note_led_off(midi_num);
    pad_note_sound_off(midi_num);
  );

  // CC
  midi_type == PAD_DRV_MIDI_NOTE_CC ? (
    // Layout
    PAD_CC_LAYOUT_START <= midi_num &&
    midi_num <= PAD_CC_LAYOUT_END ? (
      layout_number = midi_num - PAD_CC_LAYOUT_START;
      midi_value == 127 ? (
        pad_layout_select(layout_number);
      );
    );

    // Right & Left
    midi_num == PAD_CC_RIGHT ||
    midi_num == PAD_CC_LEFT ? (
      midi_value == 127 ? (
        // Right
        midi_num == PAD_CC_RIGHT ? (
          pad_layout_increase_do(pad_layout_get_current());
        );
        // Left
        midi_num == PAD_CC_LEFT ? (
          pad_layout_decrease_do(pad_layout_get_current());
        );
      );
    );
  );


);
